import {
  Bot,
  type Context,
  session,
  SessionFlavor,
  InlineKeyboard,
} from "grammy";
import { run, sequentialize } from "@grammyjs/runner";
import {
  conversations,
  createConversation,
  type Conversation,
  type ConversationFlavor,
} from "@grammyjs/conversations";
import { MongoDBAdapter } from "@grammyjs/storage-mongodb";
import mongoose from "mongoose";
import "dotenv/config";
import { connectDB } from "./db";
import User from "./models/User";
import Measurement from "./models/Measurement";
import {
  registrationConversation,
  REGISTRATION_CONVERSATION_ID,
} from "./controllers/registration";
import {
  EDIT_PROFILE_CONVERSATION_ID,
  editProfileConversation,
} from "./controllers/editProfile";
import { ScheduleService } from "./services/scheduleService";

interface SessionData {
  expectingMeasurement?: boolean;
  // userId?: number;
  // username?: string;
  // registrationComplete?: boolean;
  // lastPressure?: {
  //   systolic: number;
  //   diastolic: number;
  //   pulse: number;
  //   timestamp: Date;
  // };
}

export interface BotContext extends Context {
  session: SessionData;
}
export type MyContext = BotContext & ConversationFlavor<Context, BotContext>;
// <<<--- –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export type MyConversation = Conversation<MyContext>;

const BOT_TOKEN = process.env.BOT_TOKEN;

if (!BOT_TOKEN) {
  console.error("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
  process.exit(1);
}

function getSessionKey(ctx: MyContext) {
  return ctx.chat?.id.toString();
}

const bot = new Bot<MyContext>(BOT_TOKEN);
bot.use(conversations());
const scheduleService = new ScheduleService(bot);

bot.use(sequentialize(getSessionKey));
bot.use(
  session({
    initial: (): SessionData => ({
      expectingMeasurement: false,
      // userId: 0,
      // username: "",
      // registrationComplete: false,
      // lastPressure: {
      //   systolic: 0,
      //   diastolic: 0,
      //   pulse: 0,
      //   timestamp: new Date(),
      // },
    }), // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    storage: new MongoDBAdapter({
      collection: mongoose.connection.collection("sessions"),
    }),
  })
);

// <<<--- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º conversation ---
bot.use(
  createConversation(registrationConversation, REGISTRATION_CONVERSATION_ID)
);
bot.use(
  createConversation(editProfileConversation, EDIT_PROFILE_CONVERSATION_ID)
);

bot.command("start", async (ctx) => {
  console.log(
    `–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id} (${ctx.from?.username})`
  );
  try {
    const user = await User.findOne({ telegramId: ctx.from?.id });
    if (user) {
      await ctx.reply(
        `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${user.firstName}! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.`
      );
      // TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /help
    } else {
      const inlineKeyboard = new InlineKeyboard().text(
        "‚úçÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
        "/register"
      ); // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

      await ctx.reply(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n" +
          "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—É–ª—å—Å.\n\n" +
          "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register.",
        { reply_markup: inlineKeyboard }
      );
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ /start:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /register - –∑–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
bot.command("register", async (ctx) => {
  console.log(
    `–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /register –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id} (${ctx.from?.username})`
  );
  try {
    const user = await User.findOne({ telegramId: ctx.from?.id });
    if (user) {
      await ctx.reply(`–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, ${user.firstName}!`);
    } else {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      await ctx.conversation.enter(REGISTRATION_CONVERSATION_ID);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /register:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

bot.command("edit", async (ctx) => {
  const userId = ctx.from?.id;
  if (!userId) return;

  console.log(`[Command /edit] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç ${userId}`);

  try {
    const user = await User.findOne({ telegramId: userId });
    if (!user) {
      await ctx.reply(
        "–í—ã –µ—â–µ  –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register."
      );
      return;
    }
    const editKeyboard = new InlineKeyboard()
      .text("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", "edit_profile")
      .row() // .row() –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –Ω–∞ —Å–ª–µ–¥. —Å—Ç—Ä–æ–∫—É
      .text("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∏ –ø–æ—è—Å", "edit_schedule")
      .row()
      .text("üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ", "edit_last_measurement");
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" –∏–ª–∏ "–ù–∞–∑–∞–¥" ?

    await ctx.reply("üéõÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", {
      reply_markup: editKeyboard,
    });
  } catch (error) {
    console.error(
      `[Command /edit] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è ${userId}:`,
      error
    );
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});

// <<<--- –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û" --->>>
bot.callbackQuery("edit_profile", async (ctx) => {
  if (!ctx.from) return;
  console.log(
    `[Callback edit_profile] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${ctx.from.id}`
  );
  await ctx.answerCallbackQuery({ text: "–ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û..." }); // –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

  // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (ctx.callbackQuery.message) {
    try {
      await ctx.editMessageReplyMarkup({ reply_markup: undefined });
    } catch (e) {
      console.warn(
        `[Callback edit_profile] –ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è ${ctx.callbackQuery.message.message_id}`,
        e
      );
    }
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ (conversation)
  // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä 'edit_profile_conv' –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
  await ctx.conversation.enter("edit_profile_conv");
});
// <<<--- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π ---
// –°–ª—É—à–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç "—á–∏—Å–ª–æ/—á–∏—Å–ª–æ —á–∏—Å–ª–æ"
const measurementRegex =
  /^\s*(\d{1,3})\s*[/\\.,\s]\s*(\d{1,3})\s+(\d{1,3})\s*$/;

bot.callbackQuery("enter_measurement", async (ctx) => {
  if (!ctx.chat || !ctx.from) return; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è chat –∏ from

  ctx.session.expectingMeasurement = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
  console.log(
    `[Callback] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≤–≤–æ–¥–∞. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è.`
  );

  await ctx.answerCallbackQuery(); // –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏

  // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ —É–ª—É—á—à–∞–µ—Ç UX)
  if (ctx.callbackQuery.message) {
    try {
      await ctx.editMessageReplyMarkup({ reply_markup: undefined });
    } catch (e) {
      console.warn(
        `[Callback] –ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è ${ctx.callbackQuery.message.message_id}`,
        e
      );
    }
  }

  await ctx.reply(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–∞–≤–ª–µ–Ω–∏–µ/–î–∞–≤–ª–µ–Ω–∏–µ –ü—É–ª—å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 120/80 75)"
  );
});

bot.on("message:text", async (ctx, next) => {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
  if (ctx.message.text.startsWith("/")) {
    console.log(
      `[Text Handler] –°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π "${ctx.message.text}", —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –±—ã–ª) –∏ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ.`
    );
    ctx.session.expectingMeasurement = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    return await next(); // –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –∫–æ–º–∞–Ω–¥
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!ctx.session.expectingMeasurement) {
    console.log(
      `[Text Handler] –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è ${ctx.from?.id}, –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ.`
    );
    return await next(); // –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)
  }

  // --- –ï—Å–ª–∏ –º—ã –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ ---
  console.log(
    `[Text Handler] –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –æ—Ç ${ctx.from?.id}. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: "${ctx.message.text}"`
  );

  const match = ctx.message.text.match(measurementRegex);

  if (match) {
    // --- –§–æ—Ä–º–∞—Ç —Å–æ–≤–ø–∞–ª ---
    console.log(`[Text Handler] –§–æ—Ä–º–∞—Ç —Å–æ–≤–ø–∞–ª –¥–ª—è ${ctx.from?.id}.`);
    try {
      const systolic = parseInt(match[1], 10);
      const diastolic = parseInt(match[2], 10);
      const pulse = parseInt(match[3], 10);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
      if (
        systolic < 50 ||
        systolic > 300 ||
        diastolic < 30 ||
        diastolic > 200 ||
        pulse < 30 ||
        pulse > 250
      ) {
        await ctx.reply(
          "üò¨ –ö–∞–∂–µ—Ç—Å—è, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 120/80 75)."
        );
        console.warn(
          `[Text Handler] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç ${ctx.from?.id}: ${systolic}/${diastolic} ${pulse}`
        );
        // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –∂–¥–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω—É–∂–µ–Ω _id –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
      const user = await User.findOne({ telegramId: ctx.from?.id });
      if (!user) {
        // –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º
        await ctx.reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—à—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start."
        );
        ctx.session.expectingMeasurement = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ
      const newMeasurement = await Measurement.create({
        userId: user._id,
        timestamp: new Date(),
        systolic,
        diastolic,
        pulse,
      });

      console.log(
        `[Text Handler] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ ${newMeasurement._id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}`
      );
      await ctx.reply(
        `‚úÖ –î–∞–≤–ª–µ–Ω–∏–µ ${systolic}/${diastolic} –∏ –ø—É–ª—å—Å ${pulse} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –°–ø–∞—Å–∏–±–æ!`
      );
      ctx.session.expectingMeasurement = false; // <<<--- –°–ë–†–ê–°–´–í–ê–ï–ú –§–õ–ê–ì –æ–∂–∏–¥–∞–Ω–∏—è
    } catch (error) {
      console.error(
        `[Text Handler] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ—Ç ${ctx.from?.id}:`,
        error
      );
      await ctx.reply(
        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
      );
      // –°–±—Ä–∞—Å—ã–≤–∞—Ç—å –ª–∏ —Ñ–ª–∞–≥ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - —Å–ø–æ—Ä–Ω–æ. –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏–≤–∞—Ç—å—Å—è.
      ctx.session.expectingMeasurement = false;
    }
  } else {
    // --- –§–æ—Ä–º–∞—Ç –ù–ï —Å–æ–≤–ø–∞–ª ---
    console.log(
      `[Text Handler] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç ${ctx.from?.id}: "${ctx.message.text}"`
    );
    await ctx.reply(
      "‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n" +
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–î–∞–≤–ª–µ–Ω–∏–µ/–î–∞–≤–ª–µ–Ω–∏–µ –ü—É–ª—å—Å** (—á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ `/` –∏–ª–∏ –ø—Ä–æ–±–µ–ª, –∑–∞—Ç–µ–º –ø—Ä–æ–±–µ–ª –∏ –ø—É–ª—å—Å).\n" +
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `120/80 75`",
      { parse_mode: "Markdown" } // –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
    );
    // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
  }
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.update.update_id}:`);
  console.error(err.error); // –õ–æ–≥–∏—Ä—É–µ–º —Å–∞–º—É –æ—à–∏–±–∫—É

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  // ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.").catch(e => console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:", e));
});

// --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

const startBot = async () => {
  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
  await connectDB();

  // <<<--- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ü–û–°–õ–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î ---
  // –ü–µ—Ä–µ–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤ —Å–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
  await scheduleService.initializeSchedules();

  // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º runner
  const runner = run(bot);

  console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è...");

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ runner'–∞
  const stopRunner = () => {
    if (runner.isRunning()) {
      runner.stop();
      console.log("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
    }
  };

  process.once("SIGINT", stopRunner); // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C
  process.once("SIGTERM", stopRunner); // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
};

startBot().catch((err) => {
  console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", err);
  process.exit(1);
});

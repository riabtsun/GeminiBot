import {
  Bot,
  type Context,
  session,
  SessionFlavor,
  NextFunction,
} from "grammy";
import { run, sequentialize } from "@grammyjs/runner";
import {
  conversations,
  createConversation,
  type Conversation,
  type ConversationFlavor,
} from "@grammyjs/conversations";
import { MongoDBAdapter } from "@grammyjs/storage-mongodb";
import mongoose from "mongoose";
import "dotenv/config";
import { connectDB } from "./db";
import {
  registrationConversation,
  REGISTRATION_CONVERSATION_ID,
} from "./controllers/registration";
import {
  EDIT_PROFILE_CONVERSATION_ID,
  editProfileConversation,
} from "./controllers/editProfile";
import { ScheduleService } from "./services/scheduleService";
import {
  EDIT_SCHEDULE_CONVERSATION_ID,
  editScheduleConversation,
} from "./controllers/editSchedule";
import {
  EDIT_MEASUREMENT_CONVERSATION_ID,
  editMeasurementConversation,
} from "./controllers/editMeasurement";
import { format } from "date-fns";
import { startCommand } from "./handlers/commands/start.command";
import { registerCommand } from "./handlers/commands/register.command";
import { editCommand } from "./handlers/commands/edit.command";
import { editProfileCb } from "./handlers/callbacks/editProfile.cb";
import { editScheduleCb } from "./handlers/callbacks/editSchedule.cb";
import { enterMeasurementCb } from "./handlers/callbacks/enterMeasurement.cb";
import { measurementValidator } from "./handlers/listeners/measurementValidator";
import { editLastMeasurement } from "./handlers/callbacks/editLastMeasurement";
import {generateReport} from "./handlers/commands/report.command";

interface SessionData {
  expectingMeasurement?: boolean;
  lastMeasurementId?: string;
}

export interface BotContext extends Context {
  session: SessionData;
}
export type MyContext = BotContext &
  SessionFlavor<SessionData> &
  ConversationFlavor<BotContext> & {
    scheduleService: ScheduleService;
  };
// <<<--- Экспортируем тип контекста
export type MyConversation = Conversation<BotContext, MyContext>;

const BOT_TOKEN = process.env.BOT_TOKEN;

if (!BOT_TOKEN) {
  console.error("Ошибка: Переменная окружения BOT_TOKEN не установлена.");
  process.exit(1);
}

function getSessionKey(ctx: MyContext) {
  return ctx.chat?.id.toString();
}

const bot = new Bot<MyContext>(BOT_TOKEN);
const scheduleService = new ScheduleService(bot);

bot.use(
  session({
    initial: (): SessionData => ({
      expectingMeasurement: false,
      lastMeasurementId: "",
    }), // Начальное состояние сессии
    storage: new MongoDBAdapter({
      collection: mongoose.connection.collection("sessions"),
    }),
  })
);

bot.use(conversations());
bot.use(sequentialize(getSessionKey));

bot.use((ctx: MyContext, next: NextFunction) => {
  ctx.scheduleService = scheduleService;
  return next();
});

// <<<--- Регистрируем conversation ---
bot.use(
  createConversation(registrationConversation, REGISTRATION_CONVERSATION_ID)
);
bot.use(
  createConversation(editProfileConversation, EDIT_PROFILE_CONVERSATION_ID)
);
bot.use(
  createConversation(editScheduleConversation, EDIT_SCHEDULE_CONVERSATION_ID)
);
bot.use(
  createConversation(
    editMeasurementConversation,
    EDIT_MEASUREMENT_CONVERSATION_ID
  )
);

bot.command("start", startCommand);

// Команда /register - запуск диалога регистрации
bot.command("register", registerCommand);

bot.command("edit", editCommand);

bot.command('report', generateReport)

// <<<--- НОВЫЙ ОБРАБОТЧИК: для кнопки "Изменить ФИО" --->>>
bot.callbackQuery("edit_profile", editProfileCb);

bot.callbackQuery("edit_schedule", editScheduleCb);

bot.callbackQuery("register", registerCommand);

bot.callbackQuery("edit_last_measurement", editLastMeasurement);

// <<<--- Обработчик для ввода измерений ---
// Слушаем текстовые сообщения, которые похожи на формат "число/число число"
export const measurementRegex =
  /^\s*(\d{1,3})\s*[/\\.,\s]\s*(\d{1,3})\s+(\d{1,3})\s*$/;

bot.callbackQuery("enter_measurement", enterMeasurementCb);

bot.on("message:text", measurementValidator);

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Ошибка при обработке обновления ${ctx.update.update_id}:`);
  console.error(err.error); // Логируем саму ошибку

  // Отправляем сообщение пользователю об ошибке (опционально)
  // ctx.reply("Произошла ошибка. Попробуйте позже.").catch(e => console.error("Не удалось отправить сообщение об ошибке:", e));
});

// --- Запуск бота ---

const startBot = async () => {
  // Сначала подключаемся к БД
  await connectDB();

  // <<<--- Инициализируем расписания ПОСЛЕ подключения к БД ---
  // Передаем экземпляр бота в сервис планировщика
  await scheduleService.initializeSchedules();

  // Создаем и запускаем runner
  const runner = run(bot);

  console.log("Бот запущен и готов принимать сообщения...");

  // Обработка остановки runner'а
  const stopRunner = () => {
    if (runner.isRunning()) {
      runner.stop();
      console.log("Бот остановлен.");
    }
  };

  process.once("SIGINT", stopRunner); // Остановка по Ctrl+C
  process.once("SIGTERM", stopRunner); // Остановка сигналом завершения
};

startBot().catch((err) => {
  console.error("Критическая ошибка при запуске бота:", err);
  process.exit(1);
});

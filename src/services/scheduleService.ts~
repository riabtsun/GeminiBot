import cron from "node-cron";
import { Bot, InlineKeyboard } from "grammy";
import { MyContext } from "../bot"; // –ù–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
import User, { IUser } from "../models/User";
import { subMinutes, parse, format } from "date-fns"; // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserTasks {
  morningReminder1?: cron.ScheduledTask;
  morningReminder2?: cron.ScheduledTask;
  morningPrompt?: cron.ScheduledTask;
  eveningReminder1?: cron.ScheduledTask;
  eveningReminder2?: cron.ScheduledTask;
  eveningPrompt?: cron.ScheduledTask;
}

export class ScheduleService {
  private bot: Bot<MyContext>;
  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö cron-–∑–∞–¥–∞—á, –∫–ª—é—á - telegramId
  private scheduledTasks: Map<number, UserTasks> = new Map();

  constructor(botInstance: Bot<MyContext>) {
    this.bot = botInstance;
    console.log("–°–µ—Ä–≤–∏—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.");
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –¥–ª—è –Ω–∏—Ö –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.
   */
  public async initializeSchedules() {
    console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...");
    try {
      const activeUsers = await User.find({ isActive: true });
      console.log(
        `–ù–∞–π–¥–µ–Ω–æ ${activeUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.`
      );
      activeUsers.forEach((user) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if (this.validateUserData(user)) {
          this.scheduleUserTasks(user);
        } else {
          console.warn(
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <span class="math-inline">\{user\.telegramId\} \(</span>{user.firstName}) –∏–º–µ–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ —Ç–∞–π–º–∑–æ–Ω—ã. –ó–∞–¥–∞—á–∏ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.`
          );
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        }
      });
      console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π:", error);
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * @param telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
   */
  public removeUserTasks(telegramId: number) {
    const userTasks = this.scheduledTasks.get(telegramId);
    if (userTasks) {
      Object.values(userTasks).forEach((task) => task?.stop());
      this.scheduledTasks.delete(telegramId);
      console.log(`–ó–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} —É–¥–∞–ª–µ–Ω—ã.`);
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∑–∞–ø—Ä–æ—Å—ã) –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * @param user - –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Mongoose
   */
  public scheduleUserTasks(user: IUser) {
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
    this.removeUserTasks(user.telegramId);

    if (!user.isActive || !this.validateUserData(user)) {
      console.log(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.telegramId} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. –ó–∞–¥–∞—á–∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è.`
      );
      return;
    }

    const tasks: UserTasks = {};
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –µ—â–µ —Ä–∞–∑ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    if (!this.validateUserData(user)) {
      console.warn(
        `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <span class="math-inline">\{user\.telegramId\} \(</span>{user.firstName}) –∏–º–µ–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ó–∞–¥–∞—á–∏ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.`
      );
      return;
    }

    // const timezone = user.timezone; // –ë–µ—Ä–µ–º —Ç–∞–π–º–∑–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try {
      const measurementKeyboard = new InlineKeyboard().text(
        "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        "enter_measurement"
      ); // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞

      // --- –£—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞–¥–∞—á–∏ ---
      const morningTime = this.parseTime(user.morningTime); // 'HH:MM' -> { hour: H, minute: M }

      if (morningTime) {
        const reminder1Time = subMinutes(morningTime.date, 60);
        const reminder2Time = subMinutes(morningTime.date, 30);

        // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∫–Ω–æ–ø–∫–∏

        tasks.morningReminder1 = this.createCronJob(
          `${format(reminder1Time, "m")} ${format(reminder1Time, "H")} * * *`,
          // timezone,
          `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –°–∫–æ—Ä–æ (—á–µ—Ä–µ–∑ 60 –º–∏–Ω) –Ω—É–∂–Ω–æ –∏–∑–º–µ—Ä–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ (${user.morningTime}).`,
          user.chatId
        );

        tasks.morningReminder2 = this.createCronJob(
          `${format(reminder2Time, "m")} ${format(reminder2Time, "H")} * * *`,
          // timezone,
          `‚ùóÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –°–∫–æ—Ä–æ (—á–µ—Ä–µ–∑ 30 –º–∏–Ω) –Ω—É–∂–Ω–æ –∏–∑–º–µ—Ä–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ (${user.morningTime}).`,
          user.chatId
        );

        tasks.morningPrompt = this.createCronJob(
          `${morningTime.minute} ${morningTime.hour} * * *`,
          `‚è∞ –ü–æ—Ä–∞ –∏–∑–º–µ—Ä–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—É–ª—å—Å! –ñ–¥—É –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 120/80 75).`,
          user.chatId,
          measurementKeyboard
        );
      }

      // --- –í–µ—á–µ—Ä–Ω–∏–µ –∑–∞–¥–∞—á–∏ ---
      const eveningTime = this.parseTime(user.eveningTime);
      if (eveningTime) {
        const reminder1Time = subMinutes(eveningTime.date, 60);
        const reminder2Time = subMinutes(eveningTime.date, 30);

        tasks.eveningReminder1 = this.createCronJob(
          `${format(reminder1Time, "m")} ${format(reminder1Time, "H")} * * *`,
          // timezone,
          `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –°–∫–æ—Ä–æ (—á–µ—Ä–µ–∑ 60 –º–∏–Ω) –Ω—É–∂–Ω–æ –∏–∑–º–µ—Ä–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ (${user.eveningTime}).`,
          user.chatId
        );

        tasks.eveningReminder2 = this.createCronJob(
          `${format(reminder2Time, "m")} ${format(reminder2Time, "H")} * * *`,
          // timezone,
          `‚ùóÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –°–∫–æ—Ä–æ (—á–µ—Ä–µ–∑ 30 –º–∏–Ω) –Ω—É–∂–Ω–æ –∏–∑–º–µ—Ä–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ (${user.eveningTime}).`,
          user.chatId
        );

        tasks.eveningPrompt = this.createCronJob(
          `${eveningTime.minute} ${eveningTime.hour} * * *`,
          // timezone,
          `‚è∞ –ü–æ—Ä–∞ –∏–∑–º–µ—Ä–∏—Ç—å –≤–µ—á–µ—Ä–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∏ –ø—É–ª—å—Å! –ñ–¥—É –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 120/80 75).`,
          user.chatId,
          measurementKeyboard
        );
      }

      this.scheduledTasks.set(user.telegramId, tasks);
      console.log(
        `–ó–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegramId} ${user.firstName} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.`
      );
    } catch (error) {
      console.error(
        `–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegramId}:`,
        error
      );
      // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
      this.removeUserTasks(user.telegramId);
    }
  }

  // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç cron-–∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
   */
  private createCronJob(
    cronPattern: string,
    // timezone: string,
    message: string,
    chatId: number,
    keyboard?: InlineKeyboard
  ): cron.ScheduledTask | undefined {
    try {
      const task = cron.schedule(
        cronPattern,
        async () => {
          console.log(`[CRON] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}: ${message}`);
          try {
            await this.bot.api.sendMessage(chatId, message, {
              parse_mode: "Markdown",
              reply_markup: keyboard // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å
            });
          } catch (error: any) {
            console.error(
              `[CRON] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`,
              error.message
            );
            // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ N –Ω–µ—É–¥–∞—á)
            if (error.description?.includes("bot was blocked by the user")) {
              console.warn(
                `[CRON] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–º–µ—Ç–∏—Ç—å –µ–≥–æ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ.`
              );
              // await User.findOneAndUpdate({ chatId }, { isActive: false });
              // this.removeUserTasks(telegramId); // –ù—É–∂–µ–Ω telegramId –∑–¥–µ—Å—å
            }
          }
        },
        {
          scheduled: true,
          // timezone: timezone, // –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–π–º–∑–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
        }
      );
      return task;
    } catch (error) {
      console.error(`[CRON] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ (${cronPattern}):`, error);
      return undefined;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
   */
  private validateUserData(user: IUser): boolean {
    return (
      this.validateTimeFormat(user.morningTime) &&
      this.validateTimeFormat(user.eveningTime)
      // this.validateTimezone(user.timezone)
    );
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –≤—Ä–µ–º—è 'HH:MM' –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å —á–∞—Å–∞–º–∏, –º–∏–Ω—É—Ç–∞–º–∏ –∏ –æ–±—ä–µ–∫—Ç–æ–º Date.
   */
  private parseTime(
    timeString: string
  ): { hour: number; minute: number; date: Date } | null {
    const match = timeString.match(/^(\d{2}):(\d{2})$/);
    if (!match) return null;
    const hour = parseInt(match[1], 10);
    const minute = parseInt(match[2], 10);
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π, –Ω–æ –Ω—É–∂–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    const date = new Date();
    date.setHours(hour, minute, 0, 0);
    return { hour, minute, date };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç HH:MM.
   */
  private validateTimeFormat(time: string): boolean {
    return /^([01]\d|2[0-3]):([0-5]\d)$/.test(time);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–∞–π–º–∑–æ–Ω—ã.
   */
  private validateTimezone(tz: string): boolean {
    try {
      Intl.DateTimeFormat(undefined, { timeZone: tz });
      return true;
    } catch (e) {
      console.warn(`[Validation] –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞: ${tz}`);
      return false;
    }
  }
}

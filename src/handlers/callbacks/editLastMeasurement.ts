import User from "../../models/User";
import Measurement from "../../models/Measurement";
import { format } from "date-fns";
import { MyContext } from "../../bot";

export const editLastMeasurement = async (ctx: MyContext) => {
  if (!ctx.from || !ctx.chat) return;

  const userId = ctx.from.id;
  console.log(
    `[Callback edit_last_measurement] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`
  );

  try {
    await ctx.answerCallbackQuery({ text: "–ò—â—É –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ..." });
    ctx.session.expectingMeasurement = true;
    // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (ctx?.callbackQuery?.message) {
      try {
        await ctx.editMessageReplyMarkup({ reply_markup: undefined });
      } catch (e) {
        /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å */
      }
    }

    // 1. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ _id
    const user = await User.findOne({ telegramId: userId });
    if (!user) {
      await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.");
      return;
    }

    // 2. –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastMeasurement = await Measurement.findOne({
      userId: user._id,
    }).sort({ timestamp: -1 }); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è (—É–±—ã–≤–∞–Ω–∏–µ)

    if (!lastMeasurement) {
      await ctx.reply("ü§∑ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π.");
      ctx.session.lastMeasurementId = "";
      return;
    }
    console.log(
      `[Callback edit_last_measurement] –ü—Ä–æ–≤–µ—Ä–∫–∞ ctx.session –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é ID –¥–ª—è user ${userId}.`
    );

    // –í—ã–≤–µ–¥–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ)
    if (ctx.session) {
      console.log(
        `[Callback edit_last_measurement] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ctx.session:`,
        ctx.session
      );
    }

    if (typeof ctx.session === "undefined") {
      console.error(
        `[Callback edit_last_measurement] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ctx.session –ù–ï –û–ü–†–ï–î–ï–õ–ï–ù –¥–ª—è user ${userId}!`
      );
      await ctx.reply(
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (—Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞).\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start, –∞ –∑–∞—Ç–µ–º —Å–Ω–æ–≤–∞ /edit."
      );
      // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å TypeError
      return;
    }
    // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —É –∏–∑–º–µ—Ä–µ–Ω–∏—è –µ—Å—Ç—å _id
    if (!lastMeasurement._id) {
      throw new Error("Measurement _id is missing");
    }

    // 3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å ID –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é
    ctx.session.lastMeasurementId = lastMeasurement._id.toString();
    console.log(
      `[Callback edit_last_measurement] ID ${ctx.session.lastMeasurementId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é.`
    );
    console.log(
      `[Callback edit_last_measurement] –°–æ—Å—Ç–æ—è–Ω–∏–µ ctx.session –ü–ï–†–ï–î conversation.enter:`,
      JSON.stringify(ctx.session)
    );

    // 4. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const measurementTimeInUser = lastMeasurement.timestamp;

    const formattedTime = format(measurementTimeInUser, "dd.MM.yyyy HH:mm");

    await ctx.reply(`–ù–∞–π–¥–µ–Ω–Ω–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ (${formattedTime}):
    –î–∞–≤–ª–µ–Ω–∏–µ: ${lastMeasurement.systolic} / ${lastMeasurement.diastolic}
    –ü—É–ª—å—Å: ${lastMeasurement.pulse}

    –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è? –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...`);

    // –î–æ –≤—Ö–æ–¥–∞ –≤ –¥–∏–∞–ª–æ–≥
    console.log(`[Callback edit_last_measurement] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏:`, {
      sessionExists: Boolean(ctx.session),
      lastMeasurementId: ctx.session?.lastMeasurementId,
    });

    // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ID –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    if (!ctx.session.lastMeasurementId) {
      await ctx.reply("–û—à–∏–±–∫–∞: ID –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ—Å—Å–∏–∏");
      return;
    }

    // 5. –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await ctx.conversation.enter("edit_measurement_conv"); // ID –¥–∏–∞–ª–æ–≥–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º –Ω–∞ —Å–ª–µ–¥. —à–∞–≥–µ
  } catch (error) {
    console.error(
      `[Callback edit_last_measurement] –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`,
      error
    );
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
};

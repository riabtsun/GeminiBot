import User from "../../models/User";
import { CommandContext, InlineKeyboard } from "grammy";
import { MyContext } from "../../bot";

export const editCommand = async (ctx: CommandContext<MyContext>) => {
  const userId = ctx.from?.id;
  if (!userId) return;

  console.log(`[Command /edit] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç ${userId}`);

  try {
    const user = await User.findOne({ telegramId: userId });
    if (!user) {
      await ctx.reply(
        "–í—ã –µ—â–µ  –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register."
      );
      return;
    }
    const editKeyboard = new InlineKeyboard()
      .text("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", "edit_profile")
      .row() // .row() –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –Ω–∞ —Å–ª–µ–¥. —Å—Ç—Ä–æ–∫—É
      .text("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –∏ –ø–æ—è—Å", "edit_schedule")
      .row()
      .text("üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ", "edit_last_measurement");
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" –∏–ª–∏ "–ù–∞–∑–∞–¥" ?

    await ctx.reply("üéõÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", {
      reply_markup: editKeyboard,
    });
  } catch (error) {
    console.error(
      `[Command /edit] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è ${userId}:`,
      error
    );
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
};

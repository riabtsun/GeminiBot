import User from "../../models/User";
import { CommandContext, InlineKeyboard } from "grammy";
import { MyContext } from "../../bot";
import { botTexts } from "../../botTexts";

export const editCommand = async (ctx: CommandContext<MyContext>) => {
  const userId = ctx.from?.id;
  if (!userId) return;

  console.log(`[Command /edit] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç ${userId}`);

  try {
    const user = await User.findOne({ telegramId: userId });
    if (!user) {
      await ctx.reply(botTexts.editCommand.notRegistered);
      return;
    }
    const editKeyboard = new InlineKeyboard()
      .text("üë§ –ó–º—ñ–Ω–∏—Ç–∏ –ü–Ü–ë", "edit_profile")
      .row() // .row() –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –Ω–∞ —Å–ª–µ–¥. —Å—Ç—Ä–æ–∫—É
      .text("‚è∞ –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å", "edit_schedule")
      .row()
      .text("üìä –ó–º—ñ–Ω–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—î –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è", "edit_last_measurement");
    // TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" –∏–ª–∏ "–ù–∞–∑–∞–¥" ?

    await ctx.reply("üéõÔ∏è –©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?", {
      reply_markup: editKeyboard,
    });
  } catch (error) {
    console.error(
      `[Command /edit] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è ${userId}:`,
      error,
    );
    await ctx.reply(botTexts.editCommand.dataError);
  }
};

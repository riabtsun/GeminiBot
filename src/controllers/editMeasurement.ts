import { MyConversation, MyContext } from "../bot";
import Measurement from "../models/Measurement";

export const EDIT_MEASUREMENT_CONVERSATION_ID = "edit_measurement_conv";

// --- –§—É–Ω–∫—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ ---
export async function editMeasurementConversation(
  conversation: MyConversation,
  ctx: MyContext
) {
  const session = await conversation.external((ctx) => ctx.session);

  console.log("session at start", session);

  const userId = ctx.from?.id;
  // –ü–æ–ª—É—á–∞–µ–º ID –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏
  const measurementId = session.lastMeasurementId;

  if (!userId || !measurementId) {
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /edit."
    );
    // –û—á–∏—â–∞–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    session.lastMeasurementId = "";
    return;
  }

  await ctx.reply(
    "üìä –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–∞–≤–ª–µ–Ω–∏–µ/–î–∞–≤–ª–µ–Ω–∏–µ –ü—É–ª—å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 120/80 75)"
  );

  let newSystolic: number | undefined;
  let newDiastolic: number | undefined;
  let newPulse: number | undefined;

  // –¶–∏–∫–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è—Ö
  while (newSystolic === undefined) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

    const responseCtx = await conversation.waitFor("message:text");
    const inputText = responseCtx.message.text.trim();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    const measurementRegex =
      /^\s*(\d{1,3})\s*[/\\.,\s]\s*(\d{1,3})\s+(\d{1,3})\s*$/;
    const match = inputText.match(measurementRegex);

    if (match) {
      const systolic = parseInt(match[1], 10);
      const diastolic = parseInt(match[2], 10);
      const pulse = parseInt(match[3], 10);

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
      if (
        systolic < 50 ||
        systolic > 300 ||
        diastolic < 30 ||
        diastolic > 200 ||
        pulse < 30 ||
        pulse > 250
      ) {
        await ctx.reply(
          "üò¨ –ó–Ω–∞—á–µ–Ω–∏—è –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 120/80 75):"
        );
        // –û—Å—Ç–∞–µ–º—Å—è –≤ —Ü–∏–∫–ª–µ while
      } else {
        // –ó–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        newSystolic = systolic;
        newDiastolic = diastolic;
        newPulse = pulse;
      }
    } else {
      // –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
      await ctx.reply(
        "‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n" +
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–î–∞–≤–ª–µ–Ω–∏–µ/–î–∞–≤–ª–µ–Ω–∏–µ –ü—É–ª—å—Å** (–Ω–∞–ø—Ä–∏–º–µ—Ä: `120/80 75`):",
        { parse_mode: "Markdown" }
      );
      // –û—Å—Ç–∞–µ–º—Å—è –≤ —Ü–∏–∫–ª–µ while
    }
  }

  // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
  try {
    const updatedMeasurement = await conversation.external(() =>
      Measurement.findByIdAndUpdate(
        measurementId,
        {
          $set: {
            systolic: newSystolic,
            diastolic: newDiastolic, // –£–±–µ–¥–∏–º—Å—è —á—Ç–æ newDiastolic –∏ newPulse –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã (–æ–Ω–∏ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –µ—Å–ª–∏ –≤—ã—à–ª–∏ –∏–∑ —Ü–∏–∫–ª–∞)
            pulse: newPulse,
          },
        },
        { new: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
      )
    );

    if (!updatedMeasurement) {
      await ctx.reply(
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Å /edit."
      );
    } else {
      await ctx.reply(`‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!
–ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${updatedMeasurement.systolic} / ${updatedMeasurement.diastolic}, –ø—É–ª—å—Å ${updatedMeasurement.pulse}`);
      console.log(
        `[Conv edit_measurement] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–±–Ω–æ–≤–∏–ª –∏–∑–º–µ—Ä–µ–Ω–∏–µ ${measurementId}.`
      );
    }
  } catch (error) {
    console.error(
      `[Conv edit_measurement] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è ${measurementId} –¥–ª—è ${userId}:`,
      error
    );
    await ctx.reply(
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
    );
  } finally {
    // –û—á–∏—â–∞–µ–º ID –∏–∑ —Å–µ—Å—Å–∏–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    session.lastMeasurementId = "";
  }
}

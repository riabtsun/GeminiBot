import { Conversation } from "@grammyjs/conversations";
import { MyContext,  BotContext } from "../bot"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
import User from "../models/User"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import { Context, InlineKeyboard } from "grammy";

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è –Ω–∞—à–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π conversation
type MyConversation = Conversation<MyContext, MyContext>;

// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
export const REGISTRATION_CONVERSATION_ID = "registration";

// –§—É–Ω–∫—Ü–∏—è-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
export async function registrationConversation(
  conversation: MyConversation,
  ctx: MyContext
) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ)
  const existingUser = await conversation.external(() =>
    User.findOne({ telegramId: ctx.from?.id })
  );

  if (existingUser) {
    await ctx.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!");
    return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
  }

  await ctx.reply(
    "–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤."
  );

  // --- –ò–º—è ---
  await ctx.reply("1. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:");
  const firstNameCtx = await conversation.waitFor("message:text");
  const firstName = firstNameCtx.message.text.trim();
  if (!firstName) {
    await ctx.reply("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.");
    return;
  }

  // --- –§–∞–º–∏–ª–∏—è ---
  await ctx.reply("2. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:");
  const lastNameCtx = await conversation.waitFor("message:text");
  const lastName = lastNameCtx.message.text.trim();
  if (!lastName) {
    await ctx.reply("–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.");
    return;
  }

  // --- –û—Ç—á–µ—Å—Ç–≤–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
  const skipPatronymicKeyboard = new InlineKeyboard().text(
    "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
    "skip_patronymic"
  );
  await ctx.reply('3. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"):', {
    reply_markup: skipPatronymicKeyboard,
  });

  let patronymic: string | undefined = undefined;
  // –ñ–¥–µ–º –ª–∏–±–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–∏–±–æ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ 'skip_patronymic'
  const patronymicAnswer = await conversation.waitFor([
    "message:text",
    "callback_query:data",
  ]);

  if (patronymicAnswer.message?.text) {
    patronymic = patronymicAnswer.message.text.trim();
    // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º (–ª—É—á—à–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback_query, –µ—Å–ª–∏ –æ–Ω –±—ã–ª)
    await patronymicAnswer.reply("–û—Ç—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", {
      reply_markup: { remove_keyboard: true },
    });
  } else if (patronymicAnswer.callbackQuery?.data === "skip_patronymic") {
    await patronymicAnswer.answerCallbackQuery({ text: "–û—Ç—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–æ." });
    // –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    await ctx.api.editMessageReplyMarkup(
      patronymicAnswer.chatId!,
      patronymicAnswer.callbackQuery.message?.message_id!
    );
  } else {
    // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    await ctx.reply("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.");
    // –ï—Å–ª–∏ –±—ã–ª callback_query, –Ω–æ –Ω–µ —Ç–æ—Ç, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–µ–≥–æ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    // await patronymicAnswer.callbackQuery?.answerCallbackQuery();
    await patronymicAnswer.answerCallbackQuery();
    return;
  }

  // --- –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å ---
  // await ctx.reply(`4. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ IANA (–Ω–∞–ø—Ä–∏–º–µ—Ä, \`Europe/Kiev\`, \`Asia/Tbilisi\`, \`UTC\`). \n–≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.`);
  // let timezone: string | undefined = undefined;
  // while (!timezone) {
  //     const timezoneCtx = await conversation.waitFor('message:text');
  //     const potentialTimezone = timezoneCtx.message.text.trim();
  //     // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ (–Ω–µ 100% –Ω–∞–¥–µ–∂–Ω–∞—è, –Ω–æ –æ—Ç—Å–µ–µ—Ç —è–≤–Ω—ã–π –º—É—Å–æ—Ä)
  //     try {
  //         Intl.DateTimeFormat(undefined, { timeZone: potentialTimezone });
  //         timezone = potentialTimezone;
  //     } catch (e) {
  //         await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `Europe/Kiev`):');
  //     }
  // }

  // --- –í—Ä–µ–º—è —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è ---
  const timeRegex = /^([01]\d|2[0-3]):([0-5]\d)$/; // –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –ß–ß:–ú–ú
  await ctx.reply(
    "5. –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è *—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ* –∏–∑–º–µ—Ä–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, `08:00`):"
  );
  let morningTime: string | undefined = undefined;
  while (!morningTime) {
    const morningTimeCtx = await conversation.waitFor("message:text");
    const timeInput = morningTimeCtx.message.text.trim();
    if (timeRegex.test(timeInput)) {
      morningTime = timeInput;
    } else {
      await ctx.reply(
        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, `08:00`):"
      );
    }
  }

  // --- –í—Ä–µ–º—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è ---
  await ctx.reply(
    "6. –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è *–≤–µ—á–µ—Ä–Ω–µ–≥–æ* –∏–∑–º–µ—Ä–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, `20:30`):"
  );
  let eveningTime: string | undefined = undefined;
  while (!eveningTime) {
    const eveningTimeCtx = await conversation.waitFor("message:text");
    const timeInput = eveningTimeCtx.message.text.trim();
    if (timeRegex.test(timeInput)) {
      eveningTime = timeInput;
    } else {
      await ctx.reply(
        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, `20:30`):"
      );
    }
  }

  // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
  try {
    await conversation.external(() =>
      User.create({
        telegramId: ctx.from?.id,
        chatId: ctx.chat?.id,
        firstName,
        lastName,
        patronymic, // –ë—É–¥–µ—Ç undefined, –µ—Å–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ
        // timezone,
        morningTime,
        eveningTime,
        isActive: true, // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      })
    );

    await ctx.reply(`üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
        –ò–º—è: ${firstName} \n
        –§–∞–º–∏–ª–∏—è: ${lastName} \n
        ${patronymic ? "–û—Ç—á–µ—Å—Ç–≤–æ :" + patronymic : ""} \n
        –£—Ç—Ä–µ–Ω–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ: ${morningTime} \n
        –í–µ—á–µ—Ä–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ: ${eveningTime} \n
        –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ–± –∏–∑–º–µ—Ä–µ–Ω–∏—è—Ö –∑–∞ 60 –∏ 30 –º–∏–Ω—É—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.`);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–∑–∂–µ. /register"
    );
  }
}

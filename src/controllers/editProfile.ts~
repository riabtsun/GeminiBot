import { type Conversation } from "@grammyjs/conversations";
import {type MyContext } from "../bot";
import User from "../models/User";
import { InlineKeyboard } from "grammy";

type MyConversation = Conversation<MyContext>;

export const EDIT_PROFILE_CONVERSATION_ID = "edit_profile_conv";

async function askForText(
  conversation: MyConversation,
  ctx: MyContext,
  prompt: string
): Promise<string> {
  await ctx.reply(prompt);
  const responseCtx = await conversation.waitFor("message:text");
  const text = responseCtx.message.text.trim();
  if (!text) {
    await ctx.reply("–í–≤–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Å–µ–±—è –∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∏—Ç—å
    return await askForText(conversation, ctx, prompt);
  }
  return text;
}

// --- –§—É–Ω–∫—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û ---
export async function editProfileConversation(
  conversation: MyConversation,
  ctx: MyContext
) {
  const userId = ctx.from?.id;
  if (!userId) {
    await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.");
    return;
  }

  await ctx.reply("üìù –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û.");

  // --- –ò–º—è ---
  const newFirstName = await askForText(
    conversation,
    ctx,
    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:"
  );

  // --- –§–∞–º–∏–ª–∏—è ---
  const newLastName = await askForText(
    conversation,
    ctx,
    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:"
  );

  // --- –û—Ç—á–µ—Å—Ç–≤–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
  const skipPatronymicKeyboard = new InlineKeyboard().text(
    "–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º",
    "skip_patronymic_edit"
  );
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–û—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º"):', {
    reply_markup: skipPatronymicKeyboard,
  });

  let newPatronymic: string | undefined = undefined; // –í–∞–∂–Ω–æ –¥–ª—è $unset
  const patronymicAnswer = await conversation.waitFor([
    "message:text",
    "callback_query:data",
  ]);

  if (patronymicAnswer.message?.text) {
    newPatronymic = patronymicAnswer.message.text.trim();
    await patronymicAnswer.reply("–û—Ç—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", {
      reply_markup: { remove_keyboard: true },
    });
  } else if (patronymicAnswer.callbackQuery?.data === "skip_patronymic_edit") {
    newPatronymic = undefined; // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–Ω–æ undefined
    await patronymicAnswer.answerCallbackQuery({
      text: "–û—Ç—á–µ—Å—Ç–≤–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ/–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø—É—Å—Ç—ã–º.",
    });
    await ctx.api.editMessageReplyMarkup(
      patronymicAnswer.chatId!,
      patronymicAnswer.callbackQuery.message?.message_id!
    );
  } else {
    await ctx.reply("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û –ø—Ä–µ—Ä–≤–∞–Ω–æ.");
    await ctx.api.answerCallbackQuery(patronymicAnswer.callbackQuery!.id);
    return;
  }

  // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º $set –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ $unset –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ
    const updateData: any = {
      $set: {
        firstName: newFirstName,
        lastName: newLastName,
      },
    };
    if (newPatronymic) {
      updateData.$set.patronymic = newPatronymic;
    } else {
      updateData.$unset = { patronymic: "" }; // –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ patronymic –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    }

    const updatedUser = await conversation.external(() =>
      User.findOneAndUpdate(
        { telegramId: userId }, // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
        updateData,
        { new: true } // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (—Ö–æ—Ç—è –∑–¥–µ—Å—å –æ–Ω –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
      )
    );

    if (!updatedUser) {
      // –≠—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—à–µ–ª –¥–æ —Å—é–¥–∞, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º
      await ctx.reply(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start."
      );
      return;
    }

    await ctx.reply(`‚úÖ –í–∞—à–∏ –§–ò–û —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!
                    –ù–æ–≤–æ–µ –∏–º—è: ${updatedUser.firstName}
                    –ù–æ–≤–∞—è —Ñ–∞–º–∏–ª–∏—è: ${updatedUser.lastName}
                    ${
                      updatedUser.patronymic
                        ? "–ù–æ–≤–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ: " + updatedUser.patronymic
                        : "–û—Ç—á–µ—Å—Ç–≤–æ: (–Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
                    }`);

    console.log(
      `[Conv edit_profile] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–∏–ª –§–ò–û.`
    );
  } catch (error) {
    console.error(
      `[Conv edit_profile] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –§–ò–û –¥–ª—è ${userId}:`,
      error
    );
    await ctx.reply(
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
    );
  }
  return;
}
